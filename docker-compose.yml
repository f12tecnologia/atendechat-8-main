version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: atendechat-postgres
    environment:
      POSTGRES_DB: atendechat
      POSTGRES_USER: atendechat
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - atendechat-network
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: atendechat-redis
    command: ["redis-server", "--bind", "0.0.0.0", "--requirepass", "${REDIS_PASSWORD}"]
    volumes:
      - redis_data:/data
    networks:
      - atendechat-network
    restart: unless-stopped

  # Backend Application
  backend:
    image: node:20-alpine
    container_name: atendechat-backend
    working_dir: /app
    environment:
      NODE_ENV: production
      BACKEND_URL: https://chat.intelfoz.app.br
      FRONTEND_URL: https://chat.intelfoz.app.br
      PORT: 3000
      DB_DIALECT: postgres
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: atendechat
      DB_PASS: ${DB_PASSWORD}
      DB_NAME: atendechat
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      REDIS_URI: redis://:${REDIS_PASSWORD}@redis:6379
      REDIS_OPT_LIMITER_MAX: 1
      REGIS_OPT_LIMITER_DURATION: 3000
      USER_LIMIT: 10
      CONNECTIONS_LIMIT: 5
      CLOSED_SEND_BY_ME: true
    volumes:
      - backend_data:/app
    command: >
      sh -c "
        echo '🚀 Configurando backend...' &&
        apk add --no-cache git python3 make g++ netcat-openbsd &&
        
        if [ ! -d '/app/.git' ]; then
          echo '📥 Clonando repositório...' &&
          git clone https://github.com/f12tecnologia/atendechat-8-main.git /tmp/repo &&
          cp -r /tmp/repo/backend/* /app/ &&
          rm -rf /tmp/repo
        fi &&
        
        echo '⏳ Aguardando serviços...' &&
        while ! nc -z postgres 5432; do sleep 2; done &&
        while ! nc -z redis 6379; do sleep 2; done &&
        
        echo '📦 Instalando dependências...' &&
        npm install --production --force &&
        
        echo '🔨 Build...' &&
        npm run build &&
        
        echo '🗄️ Migrações...' &&
        npx sequelize db:migrate &&
        npx sequelize db:seed &&
        
        echo '✅ Iniciando backend na porta 3000...' &&
        npm start
      "
    networks:
      - atendechat-network
    restart: unless-stopped

  # Frontend Build
  frontend:
    image: node:20-alpine
    container_name: atendechat-frontend
    working_dir: /app
    environment:
      REACT_APP_BACKEND_URL: https://chat.intelfoz.app.br
      REACT_APP_HOURS_CLOSE_TICKETS_AUTO: 24
    volumes:
      - frontend_build:/app/build
    command: >
      sh -c "
        echo '🎨 Configurando frontend...' &&
        apk add --no-cache git &&
        
        git clone https://github.com/f12tecnologia/atendechat-8-main.git /tmp/repo &&
        cp -r /tmp/repo/frontend/* /app/ &&
        
        echo '📦 Instalando dependências...' &&
        npm install --force &&
        
        echo '🔨 Build do React...' &&
        npm run build &&
        
        echo '📁 Copiando para volume...' &&
        cp -r build/* /app/build/ &&
        
        echo '✅ Frontend build concluído!' &&
        ls -la /app/build/ &&
        tail -f /dev/null
      "
    networks:
      - atendechat-network
    restart: unless-stopped

  # Nginx Proxy
  nginx:
    image: nginx:alpine
    container_name: atendechat-nginx
    ports:
      - "8080:80"      # HTTP na porta 8080
      - "8443:443"     # HTTPS na porta 8443
    volumes:
      - frontend_build:/usr/share/nginx/html:ro
    command: >
      sh -c "
        echo '🌐 Configurando Nginx...' &&
        apk add --no-cache openssl netcat-openbsd &&
        
        # SSL
        mkdir -p /etc/nginx/ssl &&
        openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
          -keyout /etc/nginx/ssl/key.pem \
          -out /etc/nginx/ssl/cert.pem \
          -subj '/C=BR/ST=SP/L=SP/O=Atendechat/CN=chat.intelfoz.app.br' &&
        
        # Aguardar serviços
        echo '⏳ Aguardando backend...' &&
        while ! nc -z backend 3000; do sleep 3; done &&
        
        echo '⏳ Aguardando frontend...' &&
        while [ ! -f /usr/share/nginx/html/index.html ]; do sleep 3; done &&
        
        # Configuração Nginx
        cat > /etc/nginx/nginx.conf << 'EOF'
        events {
            worker_connections 1024;
        }

        http {
            include /etc/nginx/mime.types;
            default_type application/octet-stream;
            
            sendfile on;
            keepalive_timeout 65;
            client_max_body_size 100M;
            
            gzip on;
            gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

            upstream backend {
                server backend:3000;
            }

            # HTTP Server
            server {
                listen 80;
                server_name _;

                # Frontend
                location / {
                    root /usr/share/nginx/html;
                    index index.html;
                    try_files \$$uri \$$uri/ /index.html;
                }

                # Backend API
                location /api/ {
                    proxy_pass http://backend;
                    proxy_set_header Host \$$host;
                    proxy_set_header X-Real-IP \$$remote_addr;
                    proxy_set_header X-Forwarded-For \$$proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto \$$scheme;
                }

                # WebSocket
                location /socket.io/ {
                    proxy_pass http://backend;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade \$$http_upgrade;
                    proxy_set_header Connection "upgrade";
                    proxy_set_header Host \$$host;
                }

                # Health
                location /health {
                    return 200 'OK';
                    add_header Content-Type text/plain;
                }
            }

            # HTTPS Server
            server {
                listen 443 ssl;
                server_name _;

                ssl_certificate /etc/nginx/ssl/cert.pem;
                ssl_certificate_key /etc/nginx/ssl/key.pem;

                # Frontend
                location / {
                    root /usr/share/nginx/html;
                    index index.html;
                    try_files \$$uri \$$uri/ /index.html;
                }

                # Backend API
                location /api/ {
                    proxy_pass http://backend;
                    proxy_set_header Host \$$host;
                    proxy_set_header X-Real-IP \$$remote_addr;
                    proxy_set_header X-Forwarded-For \$$proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto \$$scheme;
                }

                # WebSocket
                location /socket.io/ {
                    proxy_pass http://backend;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade \$$http_upgrade;
                    proxy_set_header Connection "upgrade";
                    proxy_set_header Host \$$host;
                }
            }
        }
        EOF
        
        echo '✅ Iniciando Nginx...' &&
        nginx -t && nginx -g 'daemon off;'
      "
    networks:
      - atendechat-network
    depends_on:
      - backend
      - frontend
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  backend_data:
  frontend_build:

networks:
  atendechat-network:
    driver: bridge
